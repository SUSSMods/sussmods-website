{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Google Drive\\\\Projects\\\\SUSS mods\\\\sussmods-website-v2\\\\src\\\\PaginationBar.jsx\";\nimport React from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PaginationBar(props) {\n  const currentPage = props.currentPage;\n  const pagesCount = Math.ceil(props.totalMods / props.modsPerPage);\n  const isPaginationShown = props.alwaysShown ? true : pagesCount > 1;\n  const isCurrentPageFirst = currentPage === 1;\n  const isCurrentPageLast = currentPage === pagesCount;\n\n  const changePage = number => {\n    if (currentPage === number) return;\n    props.setCurrentPage(number);\n  };\n\n  const onPageNumberClick = pageNumber => {\n    changePage(pageNumber);\n  };\n\n  const onPreviousPageClick = () => {\n    changePage(currentPage => currentPage - 1);\n  };\n\n  const onNextPageClick = () => {\n    changePage(currentPage => currentPage + 1);\n  }; // const setLastPageAsCurrent = () => {\n  //   if (currentPage > pagesCount) {\n  //     props.setCurrentPage(pagesCount);\n  //   }\n  // };\n\n\n  let isPageNumberOutOfRange;\n  const pageNumbers = [...new Array(pagesCount)].map((_, index) => {\n    const pageNumber = index + 1;\n    const isPageNumberFirst = pageNumber === 1;\n    const isPageNumberLast = pageNumber === pagesCount;\n    const isCurrentPageWithinTwoPageNumbers = Math.abs(pageNumber - currentPage) <= 2;\n\n    if (isPageNumberFirst || isPageNumberLast || isCurrentPageWithinTwoPageNumbers) {\n      isPageNumberOutOfRange = false;\n      return /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: () => onPageNumberClick(pageNumber),\n        active: pageNumber === currentPage,\n        children: pageNumber\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this);\n    }\n\n    if (!isPageNumberOutOfRange) {\n      isPageNumberOutOfRange = true;\n      return /*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {\n        className: \"muted\"\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }, this);\n    }\n\n    return null;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isPaginationShown && /*#__PURE__*/_jsxDEV(Pagination, {\n      size: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(Pagination.Prev, {\n        onClick: onPreviousPageClick,\n        disabled: isCurrentPageFirst\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), pageNumbers, /*#__PURE__*/_jsxDEV(Pagination.Next, {\n        onClick: onNextPageClick,\n        disabled: isCurrentPageLast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n_c = PaginationBar;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationBar\");","map":{"version":3,"sources":["C:/Users/User/Google Drive/Projects/SUSS mods/sussmods-website-v2/src/PaginationBar.jsx"],"names":["React","Pagination","PaginationBar","props","currentPage","pagesCount","Math","ceil","totalMods","modsPerPage","isPaginationShown","alwaysShown","isCurrentPageFirst","isCurrentPageLast","changePage","number","setCurrentPage","onPageNumberClick","pageNumber","onPreviousPageClick","onNextPageClick","isPageNumberOutOfRange","pageNumbers","Array","map","_","index","isPageNumberFirst","isPageNumberLast","isCurrentPageWithinTwoPageNumbers","abs"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAEzC,QAAMC,WAAW,GAAGD,KAAK,CAACC,WAA1B;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,SAAN,GAAkBL,KAAK,CAACM,WAAlC,CAAnB;AACA,QAAMC,iBAAiB,GAAGP,KAAK,CAACQ,WAAN,GAAoB,IAApB,GAA2BN,UAAU,GAAG,CAAlE;AACA,QAAMO,kBAAkB,GAAGR,WAAW,KAAK,CAA3C;AACA,QAAMS,iBAAiB,GAAGT,WAAW,KAAKC,UAA1C;;AAEA,QAAMS,UAAU,GAAGC,MAAM,IAAI;AAC3B,QAAIX,WAAW,KAAKW,MAApB,EAA4B;AAC5BZ,IAAAA,KAAK,CAACa,cAAN,CAAqBD,MAArB;AACD,GAHD;;AAKA,QAAME,iBAAiB,GAAGC,UAAU,IAAI;AACtCJ,IAAAA,UAAU,CAACI,UAAD,CAAV;AACD,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,MAAM;AAChCL,IAAAA,UAAU,CAACV,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAV;AACD,GAFD;;AAIA,QAAMgB,eAAe,GAAG,MAAM;AAC5BN,IAAAA,UAAU,CAACV,WAAW,IAAIA,WAAW,GAAG,CAA9B,CAAV;AACD,GAFD,CArByC,CAyBzC;AACA;AACA;AACA;AACA;;;AAEA,MAAIiB,sBAAJ;AAEA,QAAMC,WAAW,GAAG,CAAC,GAAG,IAAIC,KAAJ,CAAUlB,UAAV,CAAJ,EAA2BmB,GAA3B,CAA+B,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC/D,UAAMR,UAAU,GAAGQ,KAAK,GAAG,CAA3B;AACA,UAAMC,iBAAiB,GAAGT,UAAU,KAAK,CAAzC;AACA,UAAMU,gBAAgB,GAAGV,UAAU,KAAKb,UAAxC;AACA,UAAMwB,iCAAiC,GACrCvB,IAAI,CAACwB,GAAL,CAASZ,UAAU,GAAGd,WAAtB,KAAsC,CADxC;;AAGA,QACEuB,iBAAiB,IACjBC,gBADA,IAEAC,iCAHF,EAIE;AACAR,MAAAA,sBAAsB,GAAG,KAAzB;AACA,0BACE,QAAC,UAAD,CAAY,IAAZ;AAEE,QAAA,OAAO,EAAE,MAAMJ,iBAAiB,CAACC,UAAD,CAFlC;AAGE,QAAA,MAAM,EAAEA,UAAU,KAAKd,WAHzB;AAAA,kBAKGc;AALH,SACOA,UADP;AAAA;AAAA;AAAA;AAAA,cADF;AASD;;AAED,QAAI,CAACG,sBAAL,EAA6B;AAC3BA,MAAAA,sBAAsB,GAAG,IAAzB;AACA,0BAAO,QAAC,UAAD,CAAY,QAAZ;AAAsC,QAAA,SAAS,EAAC;AAAhD,SAA0BH,UAA1B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,WAAO,IAAP;AACD,GA9BmB,CAApB;AAgCA,sBACE;AAAA,cACGR,iBAAiB,iBAChB,QAAC,UAAD;AAAY,MAAA,IAAI,EAAC,IAAjB;AAAA,8BACE,QAAC,UAAD,CAAY,IAAZ;AACE,QAAA,OAAO,EAAES,mBADX;AAEE,QAAA,QAAQ,EAAEP;AAFZ;AAAA;AAAA;AAAA;AAAA,cADF,EAKGU,WALH,eAME,QAAC,UAAD,CAAY,IAAZ;AACE,QAAA,OAAO,EAAEF,eADX;AAEE,QAAA,QAAQ,EAAEP;AAFZ;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADF;AAiBH;KAlFuBX,a;AAkFvB","sourcesContent":["import React from \"react\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\nexport default function PaginationBar(props) {\r\n\r\n    const currentPage = props.currentPage;\r\n    const pagesCount = Math.ceil(props.totalMods / props.modsPerPage);\r\n    const isPaginationShown = props.alwaysShown ? true : pagesCount > 1;\r\n    const isCurrentPageFirst = currentPage === 1;\r\n    const isCurrentPageLast = currentPage === pagesCount;\r\n\r\n    const changePage = number => {\r\n      if (currentPage === number) return;\r\n      props.setCurrentPage(number);\r\n    };\r\n  \r\n    const onPageNumberClick = pageNumber => {\r\n      changePage(pageNumber);\r\n    };\r\n  \r\n    const onPreviousPageClick = () => {\r\n      changePage(currentPage => currentPage - 1);\r\n    };\r\n  \r\n    const onNextPageClick = () => {\r\n      changePage(currentPage => currentPage + 1);\r\n    };\r\n  \r\n    // const setLastPageAsCurrent = () => {\r\n    //   if (currentPage > pagesCount) {\r\n    //     props.setCurrentPage(pagesCount);\r\n    //   }\r\n    // };\r\n  \r\n    let isPageNumberOutOfRange;\r\n  \r\n    const pageNumbers = [...new Array(pagesCount)].map((_, index) => {\r\n      const pageNumber = index + 1;\r\n      const isPageNumberFirst = pageNumber === 1;\r\n      const isPageNumberLast = pageNumber === pagesCount;\r\n      const isCurrentPageWithinTwoPageNumbers =\r\n        Math.abs(pageNumber - currentPage) <= 2;\r\n  \r\n      if (\r\n        isPageNumberFirst ||\r\n        isPageNumberLast ||\r\n        isCurrentPageWithinTwoPageNumbers\r\n      ) {\r\n        isPageNumberOutOfRange = false;\r\n        return (\r\n          <Pagination.Item\r\n            key={pageNumber}\r\n            onClick={() => onPageNumberClick(pageNumber)}\r\n            active={pageNumber === currentPage}\r\n          >\r\n            {pageNumber}\r\n          </Pagination.Item>\r\n        );\r\n      }\r\n  \r\n      if (!isPageNumberOutOfRange) {\r\n        isPageNumberOutOfRange = true;\r\n        return <Pagination.Ellipsis key={pageNumber} className=\"muted\" />;\r\n      }\r\n  \r\n      return null;      \r\n    });\r\n  \r\n    return (\r\n      <>\r\n        {isPaginationShown && (\r\n          <Pagination size=\"sm\">\r\n            <Pagination.Prev\r\n              onClick={onPreviousPageClick}\r\n              disabled={isCurrentPageFirst}\r\n            />\r\n            {pageNumbers}\r\n            <Pagination.Next\r\n              onClick={onNextPageClick}\r\n              disabled={isCurrentPageLast}\r\n            />\r\n          </Pagination>\r\n        )}\r\n      </>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}